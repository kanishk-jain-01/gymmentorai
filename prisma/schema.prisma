// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  workouts              Workout[]
  accounts              Account[]
  sessions              Session[]
  
  // Subscription fields
  stripeCustomerId      String?   @unique
  stripeSubscriptionId  String?
  stripePriceId         String?
  stripeCurrentPeriodEnd DateTime?
  trialEndsAt           DateTime?
  cancelAtPeriodEnd     Boolean   @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workout {
  id          String     @id @default(cuid())
  date        DateTime   @default(now())
  name        String?
  notes       String?
  duration    Int?       // in minutes
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises   Exercise[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  rawInput    String?    // Store the original user input
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  sets        Int?
  reps        Int?
  weight      Float?   // in kg or lbs
  duration    Int?     // in seconds
  distance    Float?   // in km or miles
  notes       String?
  workoutId   String
  workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
